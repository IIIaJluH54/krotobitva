// === –ö—Ä–æ—Ç–æ –ë–∏—Ç–≤–∞ ‚Äî –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –†–ê–ë–û–¢–ê–Æ–©–ò–ú –∞–≤—Ç–æ–∫–ª–∏–∫–æ–º ===

let player = {
  coins: 0,
  damage: 1,
  autoClick: false,
  autoClickLevel: 0,
  level: 1,
  upgrades: { damage: 0, auto: 0 }
};

const $ = id => document.getElementById(id);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadGame() {
  const saved = localStorage.getItem('krotobitva');
  if (saved) {
    try {
      Object.assign(player, JSON.parse(saved));
    } catch (e) {
      console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
    }
  }
  updateUI();

  // üîÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
  if (player.autoClick && player.autoClickLevel > 0) {
    startAutoClick();
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
function saveGame() {
  localStorage.setItem('krotobitva', JSON.stringify(player));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
  $('coins').textContent = Math.floor(player.coins);
  $('damage').textContent = player.damage;
  $('level').textContent = player.level;

  // –¶–µ–Ω—ã
  $('damage-cost').textContent = getDamageCost();
  $('auto-cost').textContent = getAutoCost();

  // –ö–Ω–æ–ø–∫–∏
  $('btn-damage').disabled = player.coins < getDamageCost();
  $('btn-auto').disabled = player.coins < getAutoCost();
}

function getDamageCost() {
  return 5 + player.upgrades.damage * 10;
}

function getAutoCost() {
  return 50 + player.upgrades.auto * 100;
}

// –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤
let soundsEnabled = false;

function enableSounds() {
  if (soundsEnabled) return;
  soundsEnabled = true;
  new Audio('assets/click.mp3').play().then(a => a.pause()).catch(() => {});
}

// –ö–ª–∏–∫ –ø–æ –∫—Ä–æ—Ç—É
const krot = $('krot');

krot.addEventListener('touchstart', onHit, { passive: false });
krot.addEventListener('click', onHit);

function onHit(e) {
  if (!soundsEnabled) enableSounds();

  player.coins += player.damage;
  player.level = Math.floor(Math.log2(player.coins + 1)) + 1;

  // –≠—Ñ—Ñ–µ–∫—Ç
  const click = document.createElement('div');
  click.className = 'click-effect';
  const rect = krot.getBoundingClientRect();
  click.textContent = `-${player.damage}`;
  click.style.left = `${rect.left + rect.width / 2 - 30}px`;
  click.style.top = `${rect.top + rect.height / 2 - 30}px`;
  document.body.appendChild(click);
  setTimeout(() => click.remove(), 1000);

  // –ó–≤—É–∫
  try {
    const sound = new Audio('assets/click.mp3');
    sound.volume = 0.3;
    sound.play().catch(() => {});
  } catch (err) {}

  // –í–∏–±—Ä–∞—Ü–∏—è
  if (navigator.vibrate) navigator.vibrate(10);

  updateUI();
  saveGame();
}

// –£–ª—É—á—à–µ–Ω–∏—è
$('btn-damage').addEventListener('click', () => {
  const cost = getDamageCost();
  if (player.coins >= cost) {
    player.coins -= cost;
    player.damage += 1;
    player.upgrades.damage++;
    playUpgradeSound();
    showMsg(`+1 —É—Ä–æ–Ω! üí™`);
    updateUI();
    saveGame();
  }
});

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞–≤—Ç–æ–∫–ª–∏–∫
let autoClickInterval = null;  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª

$('btn-auto').addEventListener('click', () => {
  const cost = getAutoCost();
  if (player.coins >= cost) {
    player.coins -= cost;
    player.autoClickLevel++;
    player.upgrades.auto = player.autoClickLevel;

    // –ï—Å–ª–∏ –∞–≤—Ç–æ–∫–ª–∏–∫ –µ—â—ë –Ω–µ –≤–∫–ª—é—á—ë–Ω ‚Äî –≤–∫–ª—é—á–∞–µ–º
    if (!player.autoClick) {
      player.autoClick = true;
      startAutoClick();
    }

    playUpgradeSound();
    showMsg(`–ê–≤—Ç–æ-–∫—Ä–æ—Ç –∑–∞–ø—É—â–µ–Ω! ü§ñ`);
    updateUI();
    saveGame();
  }
});

// üîÅ –ê–≤—Ç–æ–∫–ª–∏–∫ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
function startAutoClick() {
  if (autoClickInterval) clearInterval(autoClickInterval);  // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

  autoClickInterval = setInterval(() => {
    if (player.autoClick && player.autoClickLevel > 0) {
      player.coins += player.damage;
      player.level = Math.floor(Math.log2(player.coins + 1)) + 1;
      updateUI();
      saveGame();
    }
  }, 1000);
}

// –ó–≤—É–∫ —É–ª—É—á—à–µ–Ω–∏—è
function playUpgradeSound() {
  try {
    const sound = new Audio('assets/upgrade.mp3');
    sound.volume = 0.5;
    sound.play().catch(() => {});
  } catch (err) {}
}

// –°–æ–æ–±—â–µ–Ω–∏—è
function showMsg(text) {
  const msg = $('message');
  msg.textContent = text;
  msg.classList.add('visible');
  setTimeout(() => msg.classList.remove('visible'), 1500);
}

// Telegram
if (window.Telegram?.WebApp) {
  window.Telegram.WebApp.expand();
  window.Telegram.WebApp.ready();
}

// –ó–∞–≥—Ä—É–∑–∫–∞
document.addEventListener('DOMContentLoaded', loadGame);
