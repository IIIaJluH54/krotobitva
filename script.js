// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
let user = "Player";
let coins = 0;
let diamonds = 0;
let clickPower = 1;
let autoCPS = 0;
let lastSave = Date.now();

let dailyRewardClaimedAt = 0;
let chestClaimedAt = 0;

let upgrades = [
  { name: "–ö–æ–≥—Ç–∏", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ +1", cost: 10, type: "click", level: 0 },
  { name: "–ö–∏—Ä–∫–∞", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ +1", cost: 25, type: "click", level: 0 },
  { name: "–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", desc: "+1 –º–æ–Ω–µ—Ç–∞/—Å–µ–∫", cost: 50, type: "auto", level: 0 },
  { name: "–Ø–¥–µ—Ä–Ω—ã–π —Ä–µ–∞–∫—Ç–æ—Ä", desc: "+5 –º–æ–Ω–µ—Ç/—Å–µ–∫", cost: 500, type: "auto", level: 0 },
  { name: "–õ–∞–∑–µ—Ä–Ω—ã–µ –≥–ª–∞–∑–∞", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ +5", cost: 100, type: "click", level: 0 },
  { name: "–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –±—É—Ä", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ +10", cost: 500, type: "click", level: 0 },
  { name: "–ù–∞–Ω–æ-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", desc: "+10 –º–æ–Ω–µ—Ç/—Å–µ–∫", cost: 1000, type: "auto", level: 0 },
  { name: "–ö–∏–±–µ—Ä-–ª–∞–ø—ã", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ x2", cost: 10000, type: "click", level: 0 },
  { name: "–ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞", desc: "+100 –º–æ–Ω–µ—Ç/—Å–µ–∫", cost: 50000, type: "auto", level: 0 },
  { name: "–ö–≤–∞–Ω—Ç–æ–≤—ã–π –∫—Ä–æ—Ç", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ x5", cost: 50000, type: "click", level: 0 }
];

let skins = [
  { src: "assets/krot.png", name: "–û–±—ã—á–Ω—ã–π", unlocked: true },
  { src: "assets/krot_hat.png", name: "–ö–∞—Å–∫–∞", unlocked: false },
  { src: "assets/krot_glasses.png", name: "–û—á–∫–∏", unlocked: false }
];
let currentSkin = 0;

let adminCode = "";
const ADMIN_SECRET = "KROT";

// === –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã ===
function loadGame() {
  try {
    const saved = localStorage.getItem("krotobitva_v4");
    if (saved) {
      const data = JSON.parse(saved);
      user = data.user || "Player";
      coins = data.coins || 0;
      diamonds = data.diamonds || 0;
      clickPower = data.clickPower || 1;
      autoCPS = data.autoCPS || 0;
      lastSave = data.lastSave || Date.now();
      dailyRewardClaimedAt = data.dailyRewardClaimedAt || 0;
      chestClaimedAt = data.chestClaimedAt || 0;
      upgrades = data.upgrades || upgrades;
      skins = data.skins || skins;
      currentSkin = data.currentSkin || 0;

      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è
      const secondsPassed = (Date.now() - lastSave) / 1000;
      if (autoCPS > 0 && secondsPassed > 0) {
        coins += autoCPS * secondsPassed;
        coins = Math.floor(coins);
      }
    }
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", e);
  }
}

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
function saveGame() {
  const data = {
    user, coins, diamonds, clickPower, autoCPS, lastSave: Date.now(),
    dailyRewardClaimedAt, chestClaimedAt, upgrades, skins, currentSkin
  };
  try {
    localStorage.setItem("krotobitva_v4", JSON.stringify(data));
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", e);
  }
}

// === –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram ===
function connectTelegram() {
  const btn = document.getElementById("connectBtn");
  btn.disabled = true;
  btn.textContent = "–ó–∞–≥—Ä—É–∑–∫–∞...";

  // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ö–æ–¥–∞
  setTimeout(() => {
    user = "–¢–µ–ª–µ–≥—Ä–∞–º-–ò–≥—Ä–æ–∫";
    document.getElementById("telegramScreen").classList.add("hidden");
    document.getElementById("gameScreen").classList.remove("hidden");
    loadGame();
    updateDisplay();
    setInterval(saveGame, 15000); // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  }, 500);
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===
function updateDisplay() {
  document.getElementById("coins").textContent = format(coins);
  document.getElementById("diamonds").textContent = diamonds;
  if (document.getElementById("profileName")) {
    document.getElementById("profileName").textContent = user;
    document.getElementById("profileCoins").textContent = format(coins);
    document.getElementById("profileDiamonds").textContent = diamonds;
  }
  updateTimers();
  renderUpgrades();
  renderSkins();

  // –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–≤–∫–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
  if (window.adminVisible && !document.querySelector('#admin-tab')) {
    const nav = document.querySelector('.bottom-nav');
    const adminBtn = document.createElement('button');
    adminBtn.id = 'admin-tab';
    adminBtn.innerHTML = 'üõ†Ô∏è';
    adminBtn.onclick = () => switchPage('admin');
    nav.appendChild(adminBtn);
  }
}

// –§–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª
function format(num) {
  return Math.floor(num).toLocaleString();
}

// === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü ===
function switchPage(page) {
  document.querySelectorAll(".screen").forEach(screen => {
    screen.classList.add("hidden");
  });
  document.getElementById(page).classList.remove("hidden");
}

// === –¢–∞–π–º–µ—Ä—ã ===
function updateTimers() {
  const now = Date.now();
  const day = 24 * 60 * 60 * 1000;

  // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
  if (now - dailyRewardClaimedAt < day) {
    const hours = Math.ceil((day - (now - dailyRewardClaimedAt)) / 3600000);
    const btn = document.getElementById("dailyBtn");
    if (btn) {
      btn.disabled = true;
      document.getElementById("dailyTimer").textContent = `–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: ${hours} —á`;
    }
  } else {
    const btn = document.getElementById("dailyBtn");
    if (btn) {
      btn.disabled = false;
      document.getElementById("dailyTimer").textContent = "";
    }
  }

  // –°—É–Ω–¥—É–∫
  if (now - chestClaimedAt < day) {
    const hours = Math.ceil((day - (now - chestClaimedAt)) / 3600000);
    const btn = document.getElementById("chestBtn");
    if (btn) {
      btn.disabled = true;
      document.getElementById("chestTimer").textContent = `–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: ${hours} —á`;
    }
  } else {
    const btn = document.getElementById("chestBtn");
    if (btn) {
      btn.disabled = false;
      document.getElementById("chestTimer").textContent = "";
    }
  }
}

// === –ö–ª–∏–∫ –ø–æ –∫—Ä–æ—Ç—É ===
document.addEventListener("click", (e) => {
  if (e.target.id === "krot") {
    coins += clickPower;
    updateDisplay();
    saveGame();

    const pop = document.createElement("div");
    pop.textContent = `+${clickPower}`;
    pop.style.cssText = `
      position: absolute;
      color: #0f0;
      font-weight: bold;
      pointer-events: none;
      animation: pop-up 1s ease-out forwards;
    `;
    pop.style.left = e.clientX - 20 + "px";
    pop.style.top = e.clientY - 20 + "px";
    document.body.appendChild(pop);
    setTimeout(() => document.body.removeChild(pop), 1000);
  }
});

// === –£–ª—É—á—à–µ–Ω–∏—è ===
function renderUpgrades() {
  const container = document.getElementById("upgradesList");
  if (!container) return;
  container.innerHTML = "";
  upgrades.forEach((u, i) => {
    const div = document.createElement("div");
    div.className = "upgrade-item";
    div.innerHTML = `
      <strong>${u.name}</strong> (${u.level})
      <p>${u.desc}</p>
      <button onclick="buyUpgrade(${i})">${u.cost} üí∞</button>
    `;
    container.appendChild(div);
  });
}

function buyUpgrade(index) {
  const u = upgrades[index];
  if (coins >= u.cost) {
    coins -= u.cost;
    u.level++;
    u.cost = Math.floor(u.cost * 1.5);
    if (u.type === "click") clickPower += (u.level % 5 === 0) ? 5 : 1;
    if (u.type === "auto") autoCPS += (u.level % 5 === 0) ? 10 : 1;
    updateDisplay();
    saveGame();
    showToast(`–£–ª—É—á—à–µ–Ω–æ: ${u.name}`);
  } else {
    showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
  }
}

// === –ù–∞–≥—Ä–∞–¥—ã ===
function claimDaily() {
  const now = Date.now();
  const day = 86400000;
  if (now - dailyRewardClaimedAt < day) {
    const h = Math.ceil((day - (now - dailyRewardClaimedAt)) / 3600000);
    showToast(`–ß–µ—Ä–µ–∑ ${h} —á`);
    return;
  }
  coins += 100;
  dailyRewardClaimedAt = now;
  updateDisplay();
  saveGame();
  showToast("100 –º–æ–Ω–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ!");
  updateTimers();
}

function openChest() {
  const now = Date.now();
  const day = 86400000;
  if (now - chestClaimedAt < day) {
    const h = Math.ceil((day - (now - chestClaimedAt)) / 3600000);
    showToast(`–°—É–Ω–¥—É–∫ —á–µ—Ä–µ–∑ ${h} —á`);
    return;
  }
  chestClaimedAt = now;
  const rewards = [
    { msg: "50 –º–æ–Ω–µ—Ç", effect: () => coins += 50 },
    { msg: "100 –º–æ–Ω–µ—Ç", effect: () => coins += 100 },
    { msg: "–ê–ª–º–∞–∑!", effect: () => diamonds++ },
    { msg: "–°–∏–ª–∞ +1", effect: () => clickPower += 1 },
    { msg: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∫–∏–Ω", effect: () => skins[1].unlocked = true }
  ];
  const r = rewards[Math.floor(Math.random() * rewards.length)];
  r.effect();
  updateDisplay();
  saveGame();
  showToast("–°—É–Ω–¥—É–∫: " + r.msg);
  updateTimers();
}

function adminForceChest() {
  chestClaimedAt = 0;
  openChest();
}

// === –°–∫–∏–Ω—ã ===
function renderSkins() {
  const container = document.getElementById("skinList");
  if (!container) return;
  container.innerHTML = "";
  skins.forEach((s, i) => {
    if (s.unlocked) {
      const img = document.createElement("img");
      img.src = s.src;
      img.onclick = () => equipSkin(i);
      if (i === currentSkin) img.classList.add("active");
      container.appendChild(img);
    }
  });
}

function equipSkin(index) {
  currentSkin = index;
  document.getElementById("krot").src = skins[index].src;
  renderSkins();
  saveGame();
  showToast(`–°–∫–∏–Ω: ${skins[index].name}`);
}

// === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
document.addEventListener("keydown", (e) => {
  if (e.key.length === 1) {
    adminCode += e.key.toUpperCase();
    if (adminCode.length > ADMIN_SECRET.length) {
      adminCode = adminCode.slice(-ADMIN_SECRET.length);
    }
    if (adminCode === ADMIN_SECRET) {
      window.adminVisible = true;
      switchPage("admin");
      showToast("üîì –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
      adminCode = "";
    }
  }
});

function adminAddCoins(amount) {
  coins += amount;
  updateDisplay();
  saveGame();
  showToast(`+${amount} –º–æ–Ω–µ—Ç`);
}

function adminAddDiamonds(amount) {
  diamonds += amount;
  updateDisplay();
  saveGame();
  showToast(`+${amount} –∞–ª–º–∞–∑–æ–≤`);
}

function resetProgress() {
  if (confirm("–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?")) {
    localStorage.removeItem("krotobitva_v4");
    location.reload();
  }
}

// === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
function showToast(msg) {
  const toast = document.getElementById("toast");
  toast.textContent = msg;
  toast.style.opacity = "1";
  setTimeout(() => {
    toast.style.opacity = "0";
  }, 2000);
}

// === –ê–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ===
setInterval(() => {
  if (autoCPS > 0) {
    coins += autoCPS / 10;
    updateDisplay();
  }
}, 100);

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤ ===
setInterval(updateTimers, 60000);

// === –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
window.onload = function () {
  const saved = localStorage.getItem("krotobitva_v4");
  if (saved) {
    try {
      const data = JSON.parse(saved);
      if (data.user) {
        document.getElementById("telegramScreen").classList.add("hidden");
        document.getElementById("gameScreen").classList.remove("hidden");
        loadGame();
        updateDisplay();
        setInterval(saveGame, 15000);
        return;
      }
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", e);
    }
  }
  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
  document.getElementById("telegramScreen").classList.remove("hidden");
};
