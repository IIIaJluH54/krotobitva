// === –ö—Ä–æ—Ç–æ –ë–∏—Ç–≤–∞ ‚Äî –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏–π ===

let player = {
  coins: 0,
  damage: 1,
  autoClick: false,           // true –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–∫—Ä–æ—Ç–∞
  autoClickDamage: 1,         // —É—Ä–æ–Ω –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–∞
  autoClickInterval: 1000,    // –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º—Å (–º–µ–Ω—å—à–µ = —á–∞—â–µ)
  level: 1,
  upgrades: {
    autoPurchased: false,     // –∫—É–ø–ª–µ–Ω –∞–≤—Ç–æ–∫—Ä–æ—Ç
    autoDamage: 0,            // —É—Ä–æ–≤–µ–Ω—å —É—Ä–æ–Ω–∞ –∞–≤—Ç–æ–∫–ª–∏–∫–∞
    autoSpeed: 0              // —É—Ä–æ–≤–µ–Ω—å —Å–∫–æ—Ä–æ—Å—Ç–∏
  },
  lastUpdate: Date.now()
};

const $ = id => document.getElementById(id);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function loadGame() {
  const saved = localStorage.getItem('krotobitva');
  if (saved) {
    try {
      const data = JSON.parse(saved);
      Object.assign(player, data);
      player.lastUpdate = Date.now();
    } catch (e) {
      console.warn("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", e);
    }
  }
  updateUI();

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∫–ª–∏–∫, –µ—Å–ª–∏ –∫—É–ø–ª–µ–Ω
  if (player.autoClick) {
    startAutoClick();
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
function saveGame() {
  player.lastUpdate = Date.now();
  localStorage.setItem('krotobitva', JSON.stringify(player));
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
  $('coins').textContent = Math.floor(player.coins);
  $('damage').textContent = player.damage;
  $('level').textContent = player.level;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
  $('upgrade-auto').style.display = player.autoClick ? 'block' : 'none';
  $('btn-auto-purchase').style.display = player.autoClick ? 'none' : 'block';

  // –¶–µ–Ω—ã
  $('auto-damage-cost').textContent = getAutoDamageCost();
  $('auto-speed-cost').textContent = getAutoSpeedCost();

  // –ö–Ω–æ–ø–∫–∏
  $('btn-auto-damage').disabled = player.coins < getAutoDamageCost();
  $('btn-auto-speed').disabled = player.coins < getAutoSpeedCost();
}

// === –£–õ–£–ß–®–ï–ù–ò–Ø ===

// –ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–∫—Ä–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑)
$('btn-auto-purchase').addEventListener('click', () => {
  if (player.coins >= 50 && !player.autoClick) {
    player.coins -= 50;
    player.autoClick = true;
    player.upgrades.autoPurchased = true;
    startAutoClick();
    showMsg('–ê–≤—Ç–æ-–∫—Ä–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ü§ñ');
    updateUI();
    saveGame();
  }
});

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –∞–≤—Ç–æ–∫–ª–∏–∫–∞
$('btn-auto-damage').addEventListener('click', () => {
  const cost = getAutoDamageCost();
  if (player.coins >= cost) {
    player.coins -= cost;
    player.autoClickDamage += 1;
    player.upgrades.autoDamage++;
    showMsg(`+1 —É—Ä–æ–Ω –∞–≤—Ç–æ–∫–ª–∏–∫–∞! üí•`);
    updateUI();
    saveGame();
  }
});

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞–≤—Ç–æ–∫–ª–∏–∫–∞ (—É–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª)
$('btn-auto-speed').addEventListener('click', () => {
  const cost = getAutoSpeedCost();
  if (player.coins >= cost) {
    player.coins -= cost;
    player.autoClickInterval = Math.max(100, player.autoClickInterval - 100); // –º–∏–Ω. 100 –º—Å
    player.upgrades.autoSpeed++;
    clearInterval(autoInterval); // –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
    startAutoClick();
    showMsg(`–°–∫–æ—Ä–æ—Å—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞! ‚ö°`);
    updateUI();
    saveGame();
  }
});

function getAutoDamageCost() {
  return 100 + player.upgrades.autoDamage * 50;
}

function getAutoSpeedCost() {
  return 150 + player.upgrades.autoSpeed * 75;
}

// === –ê–í–¢–û–ö–õ–ò–ö ===
let autoInterval = null;

function startAutoClick() {
  if (autoInterval) clearInterval(autoInterval);

  autoInterval = setInterval(() => {
    if (player.autoClick) {
      player.coins += player.autoClickDamage;
      player.level = Math.floor(Math.log2(player.coins + 1)) + 1;
      updateUI();
      saveGame();
    }
  }, player.autoClickInterval);
}

// === –†–£–ß–ù–û–ô –ö–õ–ò–ö ===
const krot = $('krot');
krot.addEventListener('touchstart', onHit, { passive: false });
krot.addEventListener('click', onHit);

function onHit(e) {
  if (!soundsEnabled) enableSounds();

  player.coins += player.damage;
  player.level = Math.floor(Math.log2(player.coins + 1)) + 1;

  // –≠—Ñ—Ñ–µ–∫—Ç
  const click = document.createElement('div');
  click.className = 'click-effect';
  const rect = krot.getBoundingClientRect();
  click.textContent = `-${player.damage}`;
  click.style.left = `${rect.left + rect.width / 2 - 30}px`;
  click.style.top = `${rect.top + rect.height / 2 - 30}px`;
  document.body.appendChild(click);
  setTimeout(() => click.remove(), 1000);

  playSound('assets/click.mp3', 0.3);
  if (navigator.vibrate) navigator.vibrate(10);

  saveGame();
  updateUI();
}

// === –ó–í–£–ö–ò ===
let soundsEnabled = false;
function enableSounds() {
  if (soundsEnabled) return;
  soundsEnabled = true;
  new Audio('assets/click.mp3').play().then(a => a.pause()).catch(() => {});
}

function playSound(src, vol = 1) {
  try {
    const sound = new Audio(src);
    sound.volume = vol;
    sound.play().catch(() => {});
  } catch (err) {}
}

// === –°–û–û–ë–©–ï–ù–ò–Ø ===
function showMsg(text) {
  const msg = $('message');
  msg.textContent = text;
  msg.classList.add('visible');
  setTimeout(() => msg.classList.remove('visible'), 1500);
}

// === TELEGRAM ===
if (window.Telegram?.WebApp) {
  window.Telegram.WebApp.expand();
  window.Telegram.WebApp.ready();
}

// === –ó–ê–ì–†–£–ó–ö–ê ===
document.addEventListener('DOMContentLoaded', loadGame);
