// –î–∞–Ω–Ω—ã–µ
let user = null;
let coins = 0;
let diamonds = 0;
let clickPower = 1;
let autoCPS = 0;
let lastSave = Date.now();

let dailyRewardClaimedAt = 0;
let chestClaimedAt = 0;

let upgrades = [
  { name: "–ö–æ–≥—Ç–∏", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ +1", cost: 10, type: "click", level: 0 },
  { name: "–ö–∏—Ä–∫–∞", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ +1", cost: 25, type: "click", level: 0 },
  { name: "–ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", desc: "+1 –º–æ–Ω–µ—Ç–∞/—Å–µ–∫", cost: 50, type: "auto", level: 0 },
  { name: "–Ø–¥–µ—Ä–Ω—ã–π —Ä–µ–∞–∫—Ç–æ—Ä", desc: "+5 –º–æ–Ω–µ—Ç/—Å–µ–∫", cost: 500, type: "auto", level: 0 },
  { name: "–õ–∞–∑–µ—Ä–Ω—ã–µ –≥–ª–∞–∑–∞", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ +5", cost: 100, type: "click", level: 0 },
  { name: "–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –±—É—Ä", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ +10", cost: 500, type: "click", level: 0 },
  { name: "–ù–∞–Ω–æ-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", desc: "+10 –º–æ–Ω–µ—Ç/—Å–µ–∫", cost: 1000, type: "auto", level: 0 },
  { name: "–ö–∏–±–µ—Ä-–ª–∞–ø—ã", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ x2", cost: 10000, type: "click", level: 0 },
  { name: "–ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞", desc: "+100 –º–æ–Ω–µ—Ç/—Å–µ–∫", cost: 50000, type: "auto", level: 0 },
  { name: "–ö–≤–∞–Ω—Ç–æ–≤—ã–π –∫—Ä–æ—Ç", desc: "–°–∏–ª–∞ –∫–ª–∏–∫–∞ x5", cost: 50000, type: "click", level: 0 }
];

let skins = [
  { src: "assets/krot.png", name: "–û–±—ã—á–Ω—ã–π", unlocked: true },
  { src: "assets/krot_hat.png", name: "–ö–∞—Å–∫–∞", unlocked: false },
  { src: "assets/krot_glasses.png", name: "–û—á–∫–∏", unlocked: false }
];

let currentSkin = 0;

// –ó–∞–≥—Ä—É–∑–∫–∞
function loadGame() {
  const saved = localStorage.getItem("krotobitva_v3");
  if (saved) {
    const data = JSON.parse(saved);
    Object.assign(this, data);
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const secondsPassed = (Date.now() - lastSave) / 1000;
    if (autoCPS > 0) coins += autoCPS * secondsPassed;
    coins = Math.floor(coins);
  }
  renderUpgrades();
  renderSkins();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
function saveGame() {
  const data = {
    coins, diamonds, clickPower, autoCPS, lastSave: Date.now(),
    dailyRewardClaimedAt, chestClaimedAt, upgrades, skins, currentSkin
  };
  localStorage.setItem("krotobitva_v3", JSON.stringify(data));
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
function register() {
  const name = document.getElementById("username").value.trim();
  if (!name) return alert("–í–≤–µ–¥–∏—Ç–µ –∏–º—è!");
  user = name;
  document.getElementById("registerScreen").classList.add("hidden");
  document.getElementById("gameScreen").classList.remove("hidden");
  loadGame();
  updateDisplay();
  setInterval(saveGame, 15000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
function updateDisplay() {
  document.getElementById("coins").textContent = format(coins);
  document.getElementById("diamonds").textContent = diamonds;
  if (user) {
    document.getElementById("profileName").textContent = user;
    document.getElementById("profileCoins").textContent = format(coins);
    document.getElementById("profileDiamonds").textContent = diamonds;
  }
  updateTimers();
}

// –§–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª
function format(num) {
  return Math.floor(num).toLocaleString();
}

// –¢–∞–π–º–µ—Ä—ã
function updateTimers() {
  const now = Date.now();
  const day = 24 * 60 * 60 * 1000;

  // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
  if (now - dailyRewardClaimedAt < day) {
    document.getElementById("dailyBtn").disabled = true;
    const left = Math.ceil((day - (now - dailyRewardClaimedAt)) / (60 * 60 * 1000));
    document.getElementById("dailyTimer").textContent = `–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: ${left} —á`;
  } else {
    document.getElementById("dailyBtn").disabled = false;
    document.getElementById("dailyTimer").textContent = "";
  }

  // –°—É–Ω–¥—É–∫
  if (now - chestClaimedAt < day) {
    document.getElementById("chestBtn").disabled = true;
    const left = Math.ceil((day - (now - chestClaimedAt)) / (60 * 60 * 1000));
    document.getElementById("chestTimer").textContent = `–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑: ${left} —á`;
  } else {
    document.getElementById("chestBtn").disabled = false;
    document.getElementById("chestTimer").textContent = "";
  }
}

// –ú–µ–Ω—é
function openTab(id) {
  document.querySelectorAll(".menu").forEach(m => m.classList.add("hidden"));
  document.getElementById(id).classList.remove("hidden");
}

function back() {
  document.querySelectorAll(".menu").forEach(m => m.classList.add("hidden"));
  document.getElementById("gameScreen").classList.remove("hidden");
}

// –ö–ª–∏–∫
document.getElementById("krot").addEventListener("click", () => {
  coins += clickPower;
  updateDisplay();
  saveGame();

  const pop = document.createElement("div");
  pop.textContent = `+${clickPower}`;
  pop.style.cssText = `
    position: absolute; color: #0f0; font-weight: bold;
    pointer-events: none; animation: pop-up 1s ease-out forwards;
  `;
  pop.style.left = event.clientX - 20 + "px";
  pop.style.top = event.clientY - 20 + "px";
  document.body.appendChild(pop);
  setTimeout(() => document.body.removeChild(pop), 1000);
});

// –£–ª—É—á—à–µ–Ω–∏—è
function renderUpgrades() {
  const container = document.getElementById("upgradesList");
  container.innerHTML = "";
  upgrades.forEach(u => {
    const div = document.createElement("div");
    div.className = "upgrade-item";
    div.innerHTML = `
      <strong>${u.name}</strong> (${u.level})
      <p>${u.desc}</p>
      <button onclick="buyUpgrade(${upgrades.indexOf(u)})">${u.cost} üí∞</button>
    `;
    container.appendChild(div);
  });
}

function buyUpgrade(index) {
  const u = upgrades[index];
  if (coins >= u.cost) {
    coins -= u.cost;
    u.level++;
    u.cost = Math.floor(u.cost * 1.5);
    if (u.type === "click") clickPower += u.level % 5 === 0 ? 5 : 1;
    if (u.type === "auto") autoCPS += u.level % 5 === 0 ? 10 : 1;
    updateDisplay();
    renderUpgrades();
    saveGame();
    showToast(`–£–ª—É—á—à–µ–Ω–æ: ${u.name}`);
  } else {
    showToast("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!");
  }
}

// –ù–∞–≥—Ä–∞–¥—ã
function claimDaily() {
  const now = Date.now();
  if (now - dailyRewardClaimedAt < 24 * 60 * 60 * 1000) {
    const left = Math.ceil((24 * 60 * 60 * 1000 - (now - dailyRewardClaimedAt)) / (60 * 60 * 1000));
    showToast(`–ù–∞–≥—Ä–∞–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ ${left} —á`);
    return;
  }
  coins += 100;
  dailyRewardClaimedAt = now;
  updateDisplay();
  saveGame();
  showToast("–ü–æ–ª—É—á–µ–Ω–æ 100 –º–æ–Ω–µ—Ç!");
  updateTimers();
}

function openChest() {
  const now = Date.now();
  if (now - chestClaimedAt < 24 * 60 * 60 * 1000) {
    const left = Math.ceil((24 * 60 * 60 * 1000 - (now - chestClaimedAt)) / (60 * 60 * 1000));
    showToast(`–°—É–Ω–¥—É–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${left} —á`);
    return;
  }
  chestClaimedAt = now;
  const rewards = [
    { msg: "50 –º–æ–Ω–µ—Ç", effect: () => coins += 50 },
    { msg: "100 –º–æ–Ω–µ—Ç", effect: () => coins += 100 },
    { msg: "–ê–ª–º–∞–∑!", effect: () => diamonds++ },
    { msg: "–°–∏–ª–∞ +1", effect: () => { clickPower++; upgrades[0].level++; } },
    { msg: "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∫–∏–Ω", effect: () => { skins[1].unlocked = true; renderSkins(); } }
  ];
  const r = rewards[Math.floor(Math.random() * rewards.length)];
  r.effect();
  updateDisplay();
  saveGame();
  showToast("–°—É–Ω–¥—É–∫: " + r.msg);
  updateTimers();
}

// –°–∫–∏–Ω—ã
function renderSkins() {
  const container = document.getElementById("skinList");
  container.innerHTML = "";
  skins.forEach((s, i) => {
    if (s.unlocked) {
      const img = document.createElement("img");
      img.src = s.src;
      img.onclick = () => equipSkin(i);
      if (i === currentSkin) img.classList.add("active");
      container.appendChild(img);
    }
  });
}

function equipSkin(index) {
  currentSkin = index;
  document.getElementById("krot").src = skins[index].src;
  renderSkins();
  saveGame();
  showToast(`–°–∫–∏–Ω: ${skins[index].name}`);
}

// –ê–¥–º–∏–Ω
function adminAddCoins(amount) {
  coins += amount;
  updateDisplay();
  saveGame();
  showToast(`+${amount} –º–æ–Ω–µ—Ç`);
}

function adminAddDiamonds(amount) {
  diamonds += amount;
  updateDisplay();
  saveGame();
  showToast(`+${amount} –∞–ª–º–∞–∑–æ–≤`);
}

function adminOpenChest() {
  openChest();
}

function resetProgress() {
  if (confirm("–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å?")) {
    localStorage.removeItem("krotobitva_v3");
    location.reload();
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showToast(msg) {
  const toast = document.getElementById("toast");
  toast.textContent = msg;
  toast.style.opacity = "1";
  setTimeout(() => toast.style.opacity = "0", 2000);
}

// –ê–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
setInterval(() => {
  if (autoCPS > 0) {
    coins += autoCPS / 10;
    updateDisplay();
  }
}, 100);

// –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤
setInterval(updateTimers, 60000);

// –ó–∞–≥—Ä—É–∑–∫–∞
window.onload = () => {
  const saved = localStorage.getItem("krotobitva_v3");
  if (saved) {
    document.getElementById("registerScreen").classList.add("hidden");
    document.getElementById("gameScreen").classList.remove("hidden");
    loadGame();
    updateDisplay();
    setInterval(saveGame, 15000);
  }
};
