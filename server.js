const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;
const JWT_SECRET = process.env.JWT_SECRET || 'kroto_battle_secret_key';

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/krotobattle';

console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...');

mongoose.connect(MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ');
})
.catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
  console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏');
});

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
  username: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    minlength: 3,
    maxlength: 20
  },
  password: {
    type: String,
    required: true,
    minlength: 6
  },
  coins: {
    type: Number,
    default: 0
  },
  level: {
    type: Number,
    default: 1
  },
  clicks: {
    type: Number,
    default: 0
  },
  lastActive: {
    type: Date,
    default: Date.now
  },
  // –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  achievements: {
    type: Map,
    of: Boolean,
    default: {}
  },
  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
  lastDailyReward: {
    type: Date,
    default: null
  },
  dailyStreak: {
    type: Number,
    default: 0
  },
  // –°–∫–∏–Ω—ã
  skins: {
    type: [String],
    default: ['default']
  },
  currentSkin: {
    type: String,
    default: 'default'
  },
  // –ë–æ–Ω—É—Å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
  bonusItems: {
    type: Map,
    of: Number,
    default: {}
  },
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  eventProgress: {
    type: Map,
    of: Number,
    default: {}
  }
}, {
  timestamps: true
});

// –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
let User;
try {
  User = mongoose.model('User', userSchema);
} catch (e) {
  console.log('‚ö†Ô∏è  MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  let localUsers = {};
  
  User = {
    find: async (query) => {
      const users = Object.values(localUsers).filter(user => {
        if (query.lastActive && user.lastActive < query.lastActive.$gte) return false;
        if (query.coins && user.coins <= 0) return false;
        return true;
      });
      return users.sort((a, b) => b.coins - a.coins).slice(0, 20);
    },
    findById: async (id) => localUsers[id] || null,
    findOne: async (query) => {
      return Object.values(localUsers).find(user => user.username === query.username) || null;
    },
    findByIdAndUpdate: async (id, updateData, options) => {
      if (localUsers[id]) {
        localUsers[id] = { ...localUsers[id], ...updateData, _id: id };
        return localUsers[id];
      }
      return null;
    }
  };
  
  // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  User.create = async (userData) => {
    const id = Date.now().toString();
    const user = { 
      ...userData, 
      _id: id, 
      lastActive: new Date(),
      achievements: {},
      lastDailyReward: null,
      dailyStreak: 0,
      skins: ['default'],
      currentSkin: 'default',
      bonusItems: {},
      eventProgress: {}
    };
    localUsers[id] = user;
    return user;
  };
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
    req.user = user;
    next();
  });
};

// –ú–∞—Ä—à—Ä—É—Ç—ã API

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/register', async (req, res) => {
  try {
    const { username, password } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!username || !password) {
      return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    if (username.length < 3 || username.length > 20) {
      return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤' });
    }

    if (password.length < 6) {
      return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let existingUser;
    try {
      existingUser = await User.findOne({ username });
    } catch (e) {
      // –ï—Å–ª–∏ MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      existingUser = null;
    }
    
    if (existingUser) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user;
    try {
      user = await User.create({
        username,
        password: hashedPassword
      });
    } catch (e) {
      // –ï—Å–ª–∏ MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      user = {
        _id: Date.now().toString(),
        username,
        password: hashedPassword,
        coins: 0,
        level: 1,
        clicks: 0,
        achievements: {},
        lastDailyReward: null,
        dailyStreak: 0,
        skins: ['default'],
        currentSkin: 'default',
        bonusItems: {},
        eventProgress: {}
      };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ userId: user._id, username: user.username }, JWT_SECRET);

    res.status(201).json({
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      token,
      user: {
        username: user.username,
        coins: user.coins,
        level: user.level,
        clicks: user.clicks,
        achievements: user.achievements,
        lastDailyReward: user.lastDailyReward,
        dailyStreak: user.dailyStreak,
        skins: user.skins,
        currentSkin: user.currentSkin,
        bonusItems: user.bonusItems,
        eventProgress: user.eventProgress
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –í—Ö–æ–¥
app.post('/api/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      return res.status(400).json({ error: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user;
    try {
      user = await User.findOne({ username });
    } catch (e) {
      // –ï—Å–ª–∏ MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
      return res.status(400).json({ error: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' });
    }
    
    if (!user) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ userId: user._id, username: user.username }, JWT_SECRET);

    res.json({
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      token,
      user: {
        username: user.username,
        coins: user.coins,
        level: user.level,
        clicks: user.clicks,
        achievements: user.achievements || {},
        lastDailyReward: user.lastDailyReward,
        dailyStreak: user.dailyStreak,
        skins: user.skins || ['default'],
        currentSkin: user.currentSkin,
        bonusItems: user.bonusItems || {},
        eventProgress: user.eventProgress || {}
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user', authenticateToken, async (req, res) => {
  try {
    let user;
    try {
      user = await User.findById(req.user.userId);
    } catch (e) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    try {
      await User.findByIdAndUpdate(
        req.user.userId,
        { lastActive: Date.now() },
        { new: true }
      );
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    }

    res.json({
      user: {
        username: user.username,
        coins: user.coins,
        level: user.level,
        clicks: user.clicks,
        achievements: user.achievements || {},
        lastDailyReward: user.lastDailyReward,
        dailyStreak: user.dailyStreak,
        skins: user.skins || ['default'],
        currentSkin: user.currentSkin,
        bonusItems: user.bonusItems || {},
        eventProgress: user.eventProgress || {}
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.post('/api/update-stats', authenticateToken, async (req, res) => {
  try {
    const { coins, level, clicks, achievements, bonusItems, eventProgress } = req.body;

    let user;
    try {
      user = await User.findByIdAndUpdate(
        req.user.userId,
        { 
          coins, 
          level, 
          clicks,
          lastActive: Date.now(),
          ...(achievements !== undefined && { achievements }),
          ...(bonusItems !== undefined && { bonusItems }),
          ...(eventProgress !== undefined && { eventProgress })
        },
        { new: true }
      );
    } catch (e) {
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      user = { 
        coins, 
        level, 
        clicks, 
        username: req.user.username,
        achievements: achievements || {},
        bonusItems: bonusItems || {},
        eventProgress: eventProgress || {}
      };
    }

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      user: {
        username: user.username,
        coins: user.coins,
        level: user.level,
        clicks: user.clicks,
        achievements: user.achievements || {},
        lastDailyReward: user.lastDailyReward,
        dailyStreak: user.dailyStreak,
        skins: user.skins || ['default'],
        currentSkin: user.currentSkin,
        bonusItems: user.bonusItems || {},
        eventProgress: user.eventProgress || {}
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
app.get('/api/leaderboard', async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-20 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –º–æ–Ω–µ—Ç–∞–º
    // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const oneWeekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);
    
    let leaderboard;
    try {
      leaderboard = await User.find({
        lastActive: { $gte: oneWeekAgo },
        coins: { $gt: 0 }
      });
    } catch (e) {
      // –ï—Å–ª–∏ MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      leaderboard = [];
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
    leaderboard = leaderboard
      .sort((a, b) => b.coins - a.coins)
      .slice(0, 20)
      .map((user, index) => ({
        rank: index + 1,
        username: user.username,
        coins: user.coins,
        level: user.level
      }));

    res.json({
      leaderboard
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤:', error);
    res.status(500).json({ 
      leaderboard: [],
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
app.post('/api/daily-reward', authenticateToken, async (req, res) => {
  try {
    let user;
    try {
      user = await User.findById(req.user.userId);
    } catch (e) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const now = new Date();
    const lastReward = user.lastDailyReward ? new Date(user.lastDailyReward) : null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
    if (lastReward) {
      const nextReward = new Date(lastReward);
      nextReward.setHours(nextReward.getHours() + 24);
      
      if (now < nextReward) {
        const hoursLeft = Math.ceil((nextReward - now) / (1000 * 60 * 60));
        return res.status(400).json({ 
          error: `–°–ª–µ–¥—É—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —á–µ—Ä–µ–∑ ${hoursLeft} —á–∞—Å–æ–≤`,
          nextReward: nextReward
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é –¥–Ω–µ–π
    let streak = user.dailyStreak || 0;
    if (lastReward) {
      const yesterday = new Date(now);
      yesterday.setDate(yesterday.getDate() - 1);
      
      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ –±—ã–ª–∞ –≤—á–µ—Ä–∞ –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Ä–∏—é
      if (lastReward.toDateString() === yesterday.toDateString() || 
          lastReward.toDateString() === now.toDateString()) {
        streak++;
      } else {
        streak = 1; // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é
      }
    } else {
      streak = 1; // –ü–µ—Ä–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
    const baseReward = 100;
    const streakBonus = streak * 50;
    const totalReward = baseReward + streakBonus;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      user = await User.findByIdAndUpdate(
        req.user.userId,
        { 
          lastDailyReward: now,
          dailyStreak: streak,
          coins: (user.coins || 0) + totalReward
        },
        { new: true }
      );
    } catch (e) {
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      user.lastDailyReward = now;
      user.dailyStreak = streak;
      user.coins = (user.coins || 0) + totalReward;
    }

    res.json({
      message: `–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! –°–µ—Ä–∏—è: ${streak} –¥–Ω–µ–π`,
      reward: totalReward,
      streak: streak,
      user: {
        coins: user.coins,
        lastDailyReward: user.lastDailyReward,
        dailyStreak: user.dailyStreak
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–∫—É–ø–∫–∞ —Å–∫–∏–Ω–∞
app.post('/api/buy-skin', authenticateToken, async (req, res) => {
  try {
    const { skinId } = req.body;
    
    let user;
    try {
      user = await User.findById(req.user.userId);
    } catch (e) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –°–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
    const skins = {
      'cyber': 500,
      'gold': 1000,
      'diamond': 2000,
      'rainbow': 5000,
      'space': 3000,
      'fire': 4000
    };

    const skinPrice = skins[skinId];
    if (!skinPrice) {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∫–∏–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å–∫–∏–Ω
    const userSkins = user.skins || ['default'];
    if (userSkins.includes(skinId)) {
      return res.status(400).json({ error: '–°–∫–∏–Ω —É–∂–µ –∫—É–ø–ª–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
    if ((user.coins || 0) < skinPrice) {
      return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' });
    }

    // –ü–æ–∫—É–ø–∞–µ–º —Å–∫–∏–Ω
    const newSkins = [...userSkins, skinId];
    const newCoins = (user.coins || 0) - skinPrice;

    try {
      user = await User.findByIdAndUpdate(
        req.user.userId,
        { 
          skins: newSkins,
          coins: newCoins
        },
        { new: true }
      );
    } catch (e) {
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      user.skins = newSkins;
      user.coins = newCoins;
    }

    res.json({
      message: '–°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!',
      user: {
        coins: user.coins,
        skins: user.skins
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Å–∫–∏–Ω–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –°–º–µ–Ω–∞ —Å–∫–∏–Ω–∞
app.post('/api/change-skin', authenticateToken, async (req, res) => {
  try {
    const { skinId } = req.body;
    
    let user;
    try {
      user = await User.findById(req.user.userId);
    } catch (e) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —Å–∫–∏–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSkins = user.skins || ['default'];
    if (!userSkins.includes(skinId)) {
      return res.status(400).json({ error: '–°–∫–∏–Ω –Ω–µ –∫—É–ø–ª–µ–Ω' });
    }

    // –ú–µ–Ω—è–µ–º —Å–∫–∏–Ω
    try {
      user = await User.findByIdAndUpdate(
        req.user.userId,
        { currentSkin: skinId },
        { new: true }
      );
    } catch (e) {
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      user.currentSkin = skinId;
    }

    res.json({
      message: '–°–∫–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!',
      user: {
        currentSkin: user.currentSkin
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Å–∫–∏–Ω–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/bonus-items', authenticateToken, async (req, res) => {
  try {
    let user;
    try {
      user = await User.findById(req.user.userId);
    } catch (e) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({
      bonusItems: user.bonusItems || {}
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
app.post('/api/use-bonus', authenticateToken, async (req, res) => {
  try {
    const { itemId } = req.body;
    
    let user;
    try {
      user = await User.findById(req.user.userId);
    } catch (e) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –°–ø–∏—Å–æ–∫ –±–æ–Ω—É—Å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const bonusItems = {
      'double_points': { name: '–£–¥–≤–æ–µ–Ω–∏–µ –º–æ–Ω–µ—Ç', duration: 30 }, // 30 —Å–µ–∫—É–Ω–¥
      'auto_click': { name: '–ê–≤—Ç–æ–∫–ª–∏–∫', clicks: 10 }, // 10 –∞–≤—Ç–æ–∫–ª–∏–∫–æ–≤
      'coin_boost': { name: '–ë–æ–Ω—É—Å –º–æ–Ω–µ—Ç', coins: 100 }, // 100 –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç
      'lucky_drop': { name: '–£–¥–∞—á–Ω—ã–π –¥—Ä–æ–ø', coins: 250 } // 250 –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç
    };

    const item = bonusItems[itemId];
    if (!item) {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç
    const userBonusItems = user.bonusItems || {};
    const itemCount = userBonusItems[itemId] || 0;
    if (itemCount <= 0) {
      return res.status(400).json({ error: '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–º–µ—Ç
    const newBonusItems = { ...userBonusItems };
    newBonusItems[itemId] = itemCount - 1;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
    let effectMessage = '';
    let effectData = {};
    
    if (itemId === 'double_points') {
      effectMessage = '–£–¥–≤–æ–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥!';
      effectData = { doublePoints: true, doublePointsTime: 30 };
    } else if (itemId === 'auto_click') {
      effectMessage = '–ê–≤—Ç–æ–∫–ª–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ 10 –∫–ª–∏–∫–æ–≤!';
      effectData = { autoClicks: 10 };
    } else if (itemId === 'coin_boost') {
      effectMessage = '–ë–æ–Ω—É—Å –º–æ–Ω–µ—Ç! –ü–æ–ª—É—á–µ–Ω–æ 100 –º–æ–Ω–µ—Ç!';
      effectData = { coinBoost: 100 };
    } else if (itemId === 'lucky_drop') {
      effectMessage = '–£–¥–∞—á–Ω—ã–π –¥—Ä–æ–ø! –ü–æ–ª—É—á–µ–Ω–æ 250 –º–æ–Ω–µ—Ç!';
      effectData = { coinBoost: 250 };
    }

    try {
      user = await User.findByIdAndUpdate(
        req.user.userId,
        { bonusItems: newBonusItems },
        { new: true }
      );
    } catch (e) {
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      user.bonusItems = newBonusItems;
    }

    res.json({
      message: effectMessage,
      effect: effectData,
      user: {
        bonusItems: user.bonusItems
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
app.get('/api/daily-events', authenticateToken, async (req, res) => {
  try {
    let user;
    try {
      user = await User.findById(req.user.userId);
    } catch (e) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    const events = [
      { 
        id: 'click_challenge', 
        title: '–ö–ª–∏–∫-—á–µ–ª–ª–µ–Ω–¥–∂', 
        desc: '–°–¥–µ–ª–∞–π—Ç–µ 25 –∫–ª–∏–∫–æ–≤', 
        target: 25,
        reward: '200 –º–æ–Ω–µ—Ç + 1 –±–æ–Ω—É—Å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç',
        type: 'clicks'
      },
      { 
        id: 'level_up', 
        title: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è', 
        desc: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —É—Ä–æ–≤–Ω—è 3', 
        target: 3,
        reward: '300 –º–æ–Ω–µ—Ç',
        type: 'level'
      },
      { 
        id: 'coin_sprint', 
        title: '–°–ø—Ä–∏–Ω—Ç –º–æ–Ω–µ—Ç', 
        desc: '–ù–∞–±–µ—Ä–∏—Ç–µ 500 –º–æ–Ω–µ—Ç', 
        target: 500,
        reward: '400 –º–æ–Ω–µ—Ç + 2 –±–æ–Ω—É—Å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞',
        type: 'coins'
      },
      { 
        id: 'daily_login', 
        title: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤—Ö–æ–¥', 
        desc: '–í–æ–π–¥–∏—Ç–µ –≤ –∏–≥—Ä—É —Å–µ–≥–æ–¥–Ω—è', 
        target: 1,
        reward: '100 –º–æ–Ω–µ—Ç',
        type: 'login'
      },
      { 
        id: 'combo_click', 
        title: '–ö–æ–º–±–æ-–∫–ª–∏–∫', 
        desc: '–°–¥–µ–ª–∞–π—Ç–µ 5 –∫–ª–∏–∫–æ–≤ –ø–æ–¥—Ä—è–¥ –∑–∞ 5 —Å–µ–∫—É–Ω–¥', 
        target: 5,
        reward: '500 –º–æ–Ω–µ—Ç',
        type: 'combo'
      }
    ];

    res.json({ events });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–∫—É–ø–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
app.post('/api/buy-bonus', authenticateToken, async (req, res) => {
  try {
    const { itemId } = req.body;
    
    let user;
    try {
      user = await User.findById(req.user.userId);
    } catch (e) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –°–ø–∏—Å–æ–∫ –±–æ–Ω—É—Å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
    const bonusItems = {
      'double_points': 200,
      'auto_click': 150,
      'coin_boost': 100,
      'lucky_drop': 300
    };

    const itemPrice = bonusItems[itemId];
    if (!itemPrice) {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç
    if ((user.coins || 0) < itemPrice) {
      return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' });
    }

    // –ü–æ–∫—É–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    const userBonusItems = user.bonusItems || {};
    const newItemCount = (userBonusItems[itemId] || 0) + 1;
    const newBonusItems = { ...userBonusItems, [itemId]: newItemCount };
    const newCoins = (user.coins || 0) - itemPrice;

    try {
      user = await User.findByIdAndUpdate(
        req.user.userId,
        { 
          bonusItems: newBonusItems,
          coins: newCoins
        },
        { new: true }
      );
    } catch (e) {
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      user.bonusItems = newBonusItems;
      user.coins = newCoins;
    }

    res.json({
      message: '–ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!',
      user: {
        coins: user.coins,
        bonusItems: user.bonusItems
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–æ–Ω—É—Å–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üéÆ –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
  console.log(`üìä API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/api/`);
});