import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ .env (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –Ω–æ —É–¥–æ–±–Ω–æ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN)")

GAME_URL = os.getenv("GAME_URL", "https://iiiajluh54.github.io/krotobitva/")


# –ù–µ–±–æ–ª—å—à–∞—è —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è MarkdownV2 (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
def escape_md_v2(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω—ã –¥–ª—è MarkdownV2
    to_escape = r'\_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{c}' if c in to_escape else c for c in text)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def get_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å –≤ –ö—Ä–æ—Ç–æ –ë–∏—Ç–≤–∞", web_app={"url": GAME_URL})]
    ])
    return keyboard


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    text = "üï≥Ô∏è *–ö—Ä–æ—Ç–æ –ë–∏—Ç–≤–∞*\n\n" \
           "–°–ª–µ–ø–æ–π, –Ω–æ —Å–∏–ª—å–Ω—ã–π.\n" \
           "–ú–∞–ª–µ–Ω—å–∫–∏–π, –Ω–æ —è—Ä–æ—Å—Ç–Ω—ã–π.\n\n" \
           "–ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∑–µ–º–Ω—ã–º –±–æ—è–º?"
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ
    try:
        await message.answer(escape_md_v2(text), reply_markup=get_keyboard(), parse_mode="MarkdownV2")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /start: %s", e)
        # –§–æ–ª–±—ç–∫ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer("üï≥Ô∏è –ö—Ä–æ—Ç–æ –ë–∏—Ç–≤–∞\n\n–ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∑–µ–º–Ω—ã–º –±–æ—è–º?", reply_markup=get_keyboard())


@dp.message(Command("play"))
async def cmd_play(message: types.Message):
    try:
        await message.answer("üí• –í–ø–µ—Ä—ë–¥, –≤ –±–æ–π! –†–æ–∏, –±–µ–π, –ø–æ–±–µ–∂–¥–∞–π!", reply_markup=get_keyboard())
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /play: %s", e)


async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ '–ö—Ä–æ—Ç–æ –ë–∏—Ç–≤–∞'")
    try:
        await dp.start_polling(bot)
    except asyncio.CancelledError:
        logger.info("Polling cancelled")
        raise
    except Exception as e:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ polling: %s", e)
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º session —É Bot
        try:
            await bot.session.close()
            logger.info("Bot session closed")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ bot.session: %s", e)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω CTRL+C")